MySQL的事务隔离级别：
读未提交（READ UNCOMMITTED）：读取到了其他事务修改但是未提交的数据。
读已提交（READ COMMITTED）：读取到了其他事务修改已经提交的数据。
重复读（REPEATABLE READ）：一个事务在事务内部任意时刻读到的数据都是一致的。
串行（SERIALIZABLE）：对于同一行记录，读加读锁，写加写锁，当出现读写锁冲突时，必须等待前一个事务执行完成才能继续执行。
MySQL的存储引擎InnoDB支持事务，MyISAM不支持事务。

事务的隔离级别解决的问题：
脏读：一个事务读取到了其他事务修改未提交的数据。读已提交，重复读，串行都可以解决此问题。
幻读：一个事务读取到了其他事务修改且已提交的数据。重复读和串行可以解决此问题。
不可重复读：一个事务读取到了其他事务插入的数据，数据满足了此事务的查询条件。串行或者重复读+间隙锁可以解决此问题。

InnoDB存储引擎事务隔离级别的原理：
事务隔离级别实现的根本是视图。
MVCC一致性视图支持实现了读已提交和重复读。
读已提交视图：在每一个sql语句开始执行的时候创建的视图。
可重复读：在启动事务的时候创建视图，整个事务都是基于视图的操作。这个视图是基于整库的快照。
读未提交都是基于数据库的最新操作，没有视图的概念。
串行是需要加锁实现的串行访问。

隔离级别下快照视图的原理：
InnoDB里每个事务都有一个唯一的事务ID：transation-id，这个是在事务开始的时候向InnoDB存储引擎申请的，严格的全局唯一。
每行数据都有多个版本号，每次事务更新数据的时候，都会生成一个新的版本号，并把transation-id赋值给这个版本的事务ID，记录为row trx_id。
同时要把老版本的数据保存下来，并且在新版本中能够看到它。即数据库中的每一行记录都有多个版本行，并且每一行都有一个row trx_id。这是一个隐藏列，还有一个列是
roll_pointer，它指向历史版本的数据。
每条数据在更新的时候都会记录一次日志到undo.log，记录上的最新值都可以通过回滚操作得到当前值。
假设一个值从1改成2，3，4，那么undo.log中：
<img url="hujingjing/知识点/img/undolog.png" />

当前值是 4，但是在查询这条记录的时候，不同时刻启动的事务会有不同的 read-view。如图中看到的，在视图 A、B、C 里面，这一个记录的值分别是 1、2、4，同一条记录在系统中可以存在多个版本，就是数据库的多版本并发控制（MVCC）。对于 read-view C，要得到 1，就必须将当前值依次执行图中所有的回滚操作得到。同时你会发现，即使现在有另外一个事务正在将 4 改成 5，这个事务跟 read-view A、B、C 对应的事务是不会冲突的。
回滚日志什么时候删除：当系统判断没有比回滚日志更早的事务的时候即删除回滚日志。
回滚日志在事务回滚的时候根据transitaion id查找回滚的sql执行回滚操作。
数据库的数据：
<img url="hujingjing/知识点/img/数据MVCC.png" />
SQL操作：
查询隔离级别的设置：show variables like 'tx_isolation';

设置隔离级别：
SET [GLOBAL|SESSION] TRANSACTION ISOLATION LEVEL level;
SET GLOBAL TRANSACTION ISOLATION LEVEL READ COMMITTED;






